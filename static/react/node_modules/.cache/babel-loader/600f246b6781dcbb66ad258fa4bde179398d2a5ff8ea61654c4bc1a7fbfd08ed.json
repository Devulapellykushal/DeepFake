{"ast":null,"code":"var _jsxFileName = \"/Users/devulapellykushalkumarreddy/Downloads/PS-1/static/react/src/components/MetaBalls.js\",\n  _s = $RefreshSig$();\nimport { Camera, Mesh, Program, Renderer, Transform, Triangle, Vec3 } from \"ogl\";\nimport { useEffect, useRef } from \"react\";\nimport \"./MetaBalls.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction parseHexColor(hex) {\n  const c = hex.replace(\"#\", \"\");\n  const r = parseInt(c.substring(0, 2), 16) / 255;\n  const g = parseInt(c.substring(2, 4), 16) / 255;\n  const b = parseInt(c.substring(4, 6), 16) / 255;\n  return [r, g, b];\n}\nfunction fract(x) {\n  return x - Math.floor(x);\n}\nfunction hash31(p) {\n  let r = [p * 0.1031, p * 0.1030, p * 0.0973].map(fract);\n  const r_yzx = [r[1], r[2], r[0]];\n  const dotVal = r[0] * (r_yzx[0] + 33.33) + r[1] * (r_yzx[1] + 33.33) + r[2] * (r_yzx[2] + 33.33);\n  for (let i = 0; i < 3; i++) {\n    r[i] = fract(r[i] + dotVal);\n  }\n  return r;\n}\nfunction hash33(v) {\n  let p = [v[0] * 0.1031, v[1] * 0.1030, v[2] * 0.0973].map(fract);\n  const p_yxz = [p[1], p[0], p[2]];\n  const dotVal = p[0] * (p_yxz[0] + 33.33) + p[1] * (p_yxz[1] + 33.33) + p[2] * (p_yxz[2] + 33.33);\n  for (let i = 0; i < 3; i++) {\n    p[i] = fract(p[i] + dotVal);\n  }\n  const p_xxy = [p[0], p[0], p[1]];\n  const p_yxx = [p[1], p[0], p[0]];\n  const p_zyx = [p[2], p[1], p[0]];\n  const result = [];\n  for (let i = 0; i < 3; i++) {\n    result[i] = fract((p_xxy[i] + p_yxx[i]) * p_zyx[i]);\n  }\n  return result;\n}\nconst vertex = `#version 300 es\nprecision highp float;\nlayout(location = 0) in vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\nconst fragment = `#version 300 es\nprecision highp float;\nuniform vec3 iResolution;\nuniform float iTime;\nuniform vec3 iMouse;\nuniform vec3 iColor;\nuniform vec3 iCursorColor;\nuniform float iAnimationSize;\nuniform int iBallCount;\nuniform float iCursorBallSize;\nuniform vec3 iMetaBalls[50]; // Precomputed: xy = position, z = radius\nuniform float iClumpFactor;\nuniform bool enableTransparency;\nout vec4 outColor;\nconst float PI = 3.14159265359;\n\n// Optimized: using squared distance avoids the costly sqrt()\nfloat getMetaBallValue(vec2 c, float r, vec2 p) {\n  vec2 d = p - c;\n  float dist2 = dot(d, d);\n  return (r * r) / dist2;\n}\n\nvoid main() {\n  vec2 fc = gl_FragCoord.xy;\n  float scale = iAnimationSize / iResolution.y;\n  vec2 coord = (fc - iResolution.xy * 0.5) * scale;\n  vec2 mouseW = (iMouse.xy - iResolution.xy * 0.5) * scale;\n  float m1 = 0.0;\n  for (int i = 0; i < 50; i++) {\n    if (i >= iBallCount) break;\n    m1 += getMetaBallValue(iMetaBalls[i].xy, iMetaBalls[i].z, coord);\n  }\n  float m2 = getMetaBallValue(mouseW, iCursorBallSize, coord);\n  float total = m1 + m2;\n  float f = smoothstep(-1.0, 1.0, (total - 1.3) / min(1.0, fwidth(total)));\n  vec3 cFinal = vec3(0.0);\n  if (total > 0.0) {\n    float alpha1 = m1 / total;\n    float alpha2 = m2 / total;\n    cFinal = iColor * alpha1 + iCursorColor * alpha2;\n  }\n  outColor = vec4(cFinal * f, enableTransparency ? f : 1.0);\n}\n`;\nconst MetaBalls = ({\n  color = \"#ffffff\",\n  speed = 0.3,\n  enableMouseInteraction = true,\n  enableTransparency = true,\n  hoverSmoothness = 0.05,\n  animationSize = 30,\n  ballCount = 15,\n  clumpFactor = 1,\n  cursorBallSize = 2,\n  cursorBallColor = \"#ffffff\"\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n    const dpr = 1;\n    const renderer = new Renderer({\n      dpr,\n      alpha: true,\n      premultipliedAlpha: false\n    });\n    const gl = renderer.gl;\n    gl.clearColor(0, 0, 0, enableTransparency ? 0 : 1);\n    container.appendChild(gl.canvas);\n    const camera = new Camera(gl, {\n      left: -1,\n      right: 1,\n      top: 1,\n      bottom: -1,\n      near: 0.1,\n      far: 10\n    });\n    camera.position.z = 1;\n    const geometry = new Triangle(gl);\n    const [r1, g1, b1] = parseHexColor(color);\n    const [r2, g2, b2] = parseHexColor(cursorBallColor);\n    const metaBallsUniform = [];\n    for (let i = 0; i < 50; i++) {\n      metaBallsUniform.push(new Vec3(0, 0, 0));\n    }\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        iTime: {\n          value: 0\n        },\n        iResolution: {\n          value: new Vec3(0, 0, 0)\n        },\n        iMouse: {\n          value: new Vec3(0, 0, 0)\n        },\n        iColor: {\n          value: new Vec3(r1, g1, b1)\n        },\n        iCursorColor: {\n          value: new Vec3(r2, g2, b2)\n        },\n        iAnimationSize: {\n          value: animationSize\n        },\n        iBallCount: {\n          value: ballCount\n        },\n        iCursorBallSize: {\n          value: cursorBallSize\n        },\n        iMetaBalls: {\n          value: metaBallsUniform\n        },\n        iClumpFactor: {\n          value: clumpFactor\n        },\n        enableTransparency: {\n          value: enableTransparency\n        }\n      }\n    });\n    const mesh = new Mesh(gl, {\n      geometry,\n      program\n    });\n    const scene = new Transform();\n    mesh.setParent(scene);\n    const maxBalls = 50;\n    const effectiveBallCount = Math.min(ballCount, maxBalls);\n    const ballParams = [];\n    for (let i = 0; i < effectiveBallCount; i++) {\n      const idx = i + 1;\n      const h1 = hash31(idx);\n      const st = h1[0] * (2 * Math.PI);\n      const dtFactor = 0.1 * Math.PI + h1[1] * (0.4 * Math.PI - 0.1 * Math.PI);\n      const baseScale = 5.0 + h1[1] * (10.0 - 5.0);\n      const h2 = hash33(h1);\n      const toggle = Math.floor(h2[0] * 2.0);\n      const radiusVal = 0.5 + h2[2] * (2.0 - 0.5);\n      ballParams.push({\n        st,\n        dtFactor,\n        baseScale,\n        toggle,\n        radius: radiusVal\n      });\n    }\n    const mouseBallPos = {\n      x: 0,\n      y: 0\n    };\n    let pointerInside = false;\n    let pointerX = 0;\n    let pointerY = 0;\n    function resize() {\n      if (!container) return;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width * dpr, height * dpr);\n      gl.canvas.style.width = width + \"px\";\n      gl.canvas.style.height = height + \"px\";\n      program.uniforms.iResolution.value.set(gl.canvas.width, gl.canvas.height, 0);\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n    function onPointerMove(e) {\n      if (!enableMouseInteraction) return;\n      const rect = container.getBoundingClientRect();\n      const px = e.clientX - rect.left;\n      const py = e.clientY - rect.top;\n      pointerX = px / rect.width * gl.canvas.width;\n      pointerY = (1 - py / rect.height) * gl.canvas.height;\n    }\n    function onPointerEnter() {\n      if (!enableMouseInteraction) return;\n      pointerInside = true;\n    }\n    function onPointerLeave() {\n      if (!enableMouseInteraction) return;\n      pointerInside = false;\n    }\n    container.addEventListener(\"pointermove\", onPointerMove);\n    container.addEventListener(\"pointerenter\", onPointerEnter);\n    container.addEventListener(\"pointerleave\", onPointerLeave);\n    const startTime = performance.now();\n    let animationFrameId;\n    function update(t) {\n      animationFrameId = requestAnimationFrame(update);\n      const elapsed = (t - startTime) * 0.001;\n      program.uniforms.iTime.value = elapsed;\n\n      // Update metaâ€‘ball positions on the CPU.\n      for (let i = 0; i < effectiveBallCount; i++) {\n        const p = ballParams[i];\n        const dt = elapsed * speed * p.dtFactor;\n        const th = p.st + dt;\n        const x = Math.cos(th);\n        const y = Math.sin(th + dt * p.toggle);\n        const posX = x * p.baseScale * clumpFactor;\n        const posY = y * p.baseScale * clumpFactor;\n        metaBallsUniform[i].set(posX, posY, p.radius);\n      }\n\n      // Update mouse ball position (with smoothing)\n      let targetX, targetY;\n      if (pointerInside) {\n        targetX = pointerX;\n        targetY = pointerY;\n      } else {\n        const cx = gl.canvas.width * 0.5;\n        const cy = gl.canvas.height * 0.5;\n        const rx = gl.canvas.width * 0.15;\n        const ry = gl.canvas.height * 0.15;\n        targetX = cx + Math.cos(elapsed * speed) * rx;\n        targetY = cy + Math.sin(elapsed * speed) * ry;\n      }\n      mouseBallPos.x += (targetX - mouseBallPos.x) * hoverSmoothness;\n      mouseBallPos.y += (targetY - mouseBallPos.y) * hoverSmoothness;\n      program.uniforms.iMouse.value.set(mouseBallPos.x, mouseBallPos.y, 0);\n      renderer.render({\n        scene,\n        camera\n      });\n    }\n    animationFrameId = requestAnimationFrame(update);\n    return () => {\n      var _gl$getExtension;\n      cancelAnimationFrame(animationFrameId);\n      window.removeEventListener(\"resize\", resize);\n      container.removeEventListener(\"pointermove\", onPointerMove);\n      container.removeEventListener(\"pointerenter\", onPointerEnter);\n      container.removeEventListener(\"pointerleave\", onPointerLeave);\n      container.removeChild(gl.canvas);\n      (_gl$getExtension = gl.getExtension(\"WEBGL_lose_context\")) === null || _gl$getExtension === void 0 ? void 0 : _gl$getExtension.loseContext();\n    };\n  }, [color, cursorBallColor, speed, enableMouseInteraction, hoverSmoothness, animationSize, ballCount, clumpFactor, cursorBallSize, enableTransparency]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"metaballs-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 10\n  }, this);\n};\n_s(MetaBalls, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = MetaBalls;\nexport default MetaBalls;\nvar _c;\n$RefreshReg$(_c, \"MetaBalls\");","map":{"version":3,"names":["Camera","Mesh","Program","Renderer","Transform","Triangle","Vec3","useEffect","useRef","jsxDEV","_jsxDEV","parseHexColor","hex","c","replace","r","parseInt","substring","g","b","fract","x","Math","floor","hash31","p","map","r_yzx","dotVal","i","hash33","v","p_yxz","p_xxy","p_yxx","p_zyx","result","vertex","fragment","MetaBalls","color","speed","enableMouseInteraction","enableTransparency","hoverSmoothness","animationSize","ballCount","clumpFactor","cursorBallSize","cursorBallColor","_s","containerRef","container","current","dpr","renderer","alpha","premultipliedAlpha","gl","clearColor","appendChild","canvas","camera","left","right","top","bottom","near","far","position","z","geometry","r1","g1","b1","r2","g2","b2","metaBallsUniform","push","program","uniforms","iTime","value","iResolution","iMouse","iColor","iCursorColor","iAnimationSize","iBallCount","iCursorBallSize","iMetaBalls","iClumpFactor","mesh","scene","setParent","maxBalls","effectiveBallCount","min","ballParams","idx","h1","st","PI","dtFactor","baseScale","h2","toggle","radiusVal","radius","mouseBallPos","y","pointerInside","pointerX","pointerY","resize","width","clientWidth","height","clientHeight","setSize","style","set","window","addEventListener","onPointerMove","e","rect","getBoundingClientRect","px","clientX","py","clientY","onPointerEnter","onPointerLeave","startTime","performance","now","animationFrameId","update","t","requestAnimationFrame","elapsed","dt","th","cos","sin","posX","posY","targetX","targetY","cx","cy","rx","ry","render","_gl$getExtension","cancelAnimationFrame","removeEventListener","removeChild","getExtension","loseContext","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/devulapellykushalkumarreddy/Downloads/PS-1/static/react/src/components/MetaBalls.js"],"sourcesContent":["import {\n  Camera,\n  Mesh,\n  Program,\n  Renderer,\n  Transform,\n  Triangle,\n  Vec3,\n} from \"ogl\";\nimport { useEffect, useRef } from \"react\";\n\nimport \"./MetaBalls.css\";\n\nfunction parseHexColor(hex) {\n  const c = hex.replace(\"#\", \"\");\n  const r = parseInt(c.substring(0, 2), 16) / 255;\n  const g = parseInt(c.substring(2, 4), 16) / 255;\n  const b = parseInt(c.substring(4, 6), 16) / 255;\n  return [r, g, b];\n}\n\nfunction fract(x) {\n  return x - Math.floor(x);\n}\n\nfunction hash31(p) {\n  let r = [p * 0.1031, p * 0.1030, p * 0.0973].map(fract);\n  const r_yzx = [r[1], r[2], r[0]];\n  const dotVal = r[0] * (r_yzx[0] + 33.33) +\n    r[1] * (r_yzx[1] + 33.33) +\n    r[2] * (r_yzx[2] + 33.33);\n  for (let i = 0; i < 3; i++) {\n    r[i] = fract(r[i] + dotVal);\n  }\n  return r;\n}\n\nfunction hash33(v) {\n  let p = [v[0] * 0.1031, v[1] * 0.1030, v[2] * 0.0973].map(fract);\n  const p_yxz = [p[1], p[0], p[2]];\n  const dotVal = p[0] * (p_yxz[0] + 33.33) +\n    p[1] * (p_yxz[1] + 33.33) +\n    p[2] * (p_yxz[2] + 33.33);\n  for (let i = 0; i < 3; i++) {\n    p[i] = fract(p[i] + dotVal);\n  }\n  const p_xxy = [p[0], p[0], p[1]];\n  const p_yxx = [p[1], p[0], p[0]];\n  const p_zyx = [p[2], p[1], p[0]];\n  const result = [];\n  for (let i = 0; i < 3; i++) {\n    result[i] = fract((p_xxy[i] + p_yxx[i]) * p_zyx[i]);\n  }\n  return result;\n}\n\nconst vertex = `#version 300 es\nprecision highp float;\nlayout(location = 0) in vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst fragment = `#version 300 es\nprecision highp float;\nuniform vec3 iResolution;\nuniform float iTime;\nuniform vec3 iMouse;\nuniform vec3 iColor;\nuniform vec3 iCursorColor;\nuniform float iAnimationSize;\nuniform int iBallCount;\nuniform float iCursorBallSize;\nuniform vec3 iMetaBalls[50]; // Precomputed: xy = position, z = radius\nuniform float iClumpFactor;\nuniform bool enableTransparency;\nout vec4 outColor;\nconst float PI = 3.14159265359;\n\n// Optimized: using squared distance avoids the costly sqrt()\nfloat getMetaBallValue(vec2 c, float r, vec2 p) {\n  vec2 d = p - c;\n  float dist2 = dot(d, d);\n  return (r * r) / dist2;\n}\n\nvoid main() {\n  vec2 fc = gl_FragCoord.xy;\n  float scale = iAnimationSize / iResolution.y;\n  vec2 coord = (fc - iResolution.xy * 0.5) * scale;\n  vec2 mouseW = (iMouse.xy - iResolution.xy * 0.5) * scale;\n  float m1 = 0.0;\n  for (int i = 0; i < 50; i++) {\n    if (i >= iBallCount) break;\n    m1 += getMetaBallValue(iMetaBalls[i].xy, iMetaBalls[i].z, coord);\n  }\n  float m2 = getMetaBallValue(mouseW, iCursorBallSize, coord);\n  float total = m1 + m2;\n  float f = smoothstep(-1.0, 1.0, (total - 1.3) / min(1.0, fwidth(total)));\n  vec3 cFinal = vec3(0.0);\n  if (total > 0.0) {\n    float alpha1 = m1 / total;\n    float alpha2 = m2 / total;\n    cFinal = iColor * alpha1 + iCursorColor * alpha2;\n  }\n  outColor = vec4(cFinal * f, enableTransparency ? f : 1.0);\n}\n`;\n\nconst MetaBalls = ({\n  color = \"#ffffff\",\n  speed = 0.3,\n  enableMouseInteraction = true,\n  enableTransparency = true,\n  hoverSmoothness = 0.05,\n  animationSize = 30,\n  ballCount = 15,\n  clumpFactor = 1,\n  cursorBallSize = 2,\n  cursorBallColor = \"#ffffff\",\n}) => {\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    const dpr = 1;\n    const renderer = new Renderer({ dpr, alpha: true, premultipliedAlpha: false });\n    const gl = renderer.gl;\n    gl.clearColor(0, 0, 0, enableTransparency ? 0 : 1);\n    container.appendChild(gl.canvas);\n\n    const camera = new Camera(gl, {\n      left: -1, right: 1, top: 1, bottom: -1, near: 0.1, far: 10,\n    });\n    camera.position.z = 1;\n\n    const geometry = new Triangle(gl);\n    const [r1, g1, b1] = parseHexColor(color);\n    const [r2, g2, b2] = parseHexColor(cursorBallColor);\n\n    const metaBallsUniform = [];\n    for (let i = 0; i < 50; i++) {\n      metaBallsUniform.push(new Vec3(0, 0, 0));\n    }\n\n    const program = new Program(gl, {\n      vertex,\n      fragment,\n      uniforms: {\n        iTime: { value: 0 },\n        iResolution: { value: new Vec3(0, 0, 0) },\n        iMouse: { value: new Vec3(0, 0, 0) },\n        iColor: { value: new Vec3(r1, g1, b1) },\n        iCursorColor: { value: new Vec3(r2, g2, b2) },\n        iAnimationSize: { value: animationSize },\n        iBallCount: { value: ballCount },\n        iCursorBallSize: { value: cursorBallSize },\n        iMetaBalls: { value: metaBallsUniform },\n        iClumpFactor: { value: clumpFactor },\n        enableTransparency: { value: enableTransparency },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n    const scene = new Transform();\n    mesh.setParent(scene);\n\n    const maxBalls = 50;\n    const effectiveBallCount = Math.min(ballCount, maxBalls);\n    const ballParams = [];\n    for (let i = 0; i < effectiveBallCount; i++) {\n      const idx = i + 1;\n      const h1 = hash31(idx);\n      const st = h1[0] * (2 * Math.PI);\n      const dtFactor = 0.1 * Math.PI + h1[1] * (0.4 * Math.PI - 0.1 * Math.PI);\n      const baseScale = 5.0 + h1[1] * (10.0 - 5.0);\n      const h2 = hash33(h1);\n      const toggle = Math.floor(h2[0] * 2.0);\n      const radiusVal = 0.5 + h2[2] * (2.0 - 0.5);\n      ballParams.push({ st, dtFactor, baseScale, toggle, radius: radiusVal });\n    }\n\n    const mouseBallPos = { x: 0, y: 0 };\n    let pointerInside = false;\n    let pointerX = 0;\n    let pointerY = 0;\n\n    function resize() {\n      if (!container) return;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      renderer.setSize(width * dpr, height * dpr);\n      gl.canvas.style.width = width + \"px\";\n      gl.canvas.style.height = height + \"px\";\n      program.uniforms.iResolution.value.set(gl.canvas.width, gl.canvas.height, 0);\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    function onPointerMove(e) {\n      if (!enableMouseInteraction) return;\n      const rect = container.getBoundingClientRect();\n      const px = e.clientX - rect.left;\n      const py = e.clientY - rect.top;\n      pointerX = (px / rect.width) * gl.canvas.width;\n      pointerY = (1 - py / rect.height) * gl.canvas.height;\n    }\n    function onPointerEnter() {\n      if (!enableMouseInteraction) return;\n      pointerInside = true;\n    }\n    function onPointerLeave() {\n      if (!enableMouseInteraction) return;\n      pointerInside = false;\n    }\n    container.addEventListener(\"pointermove\", onPointerMove);\n    container.addEventListener(\"pointerenter\", onPointerEnter);\n    container.addEventListener(\"pointerleave\", onPointerLeave);\n\n    const startTime = performance.now();\n    let animationFrameId;\n    function update(t) {\n      animationFrameId = requestAnimationFrame(update);\n      const elapsed = (t - startTime) * 0.001;\n      program.uniforms.iTime.value = elapsed;\n\n      // Update metaâ€‘ball positions on the CPU.\n      for (let i = 0; i < effectiveBallCount; i++) {\n        const p = ballParams[i];\n        const dt = elapsed * speed * p.dtFactor;\n        const th = p.st + dt;\n        const x = Math.cos(th);\n        const y = Math.sin(th + dt * p.toggle);\n        const posX = x * p.baseScale * clumpFactor;\n        const posY = y * p.baseScale * clumpFactor;\n        metaBallsUniform[i].set(posX, posY, p.radius);\n      }\n\n      // Update mouse ball position (with smoothing)\n      let targetX, targetY;\n      if (pointerInside) {\n        targetX = pointerX;\n        targetY = pointerY;\n      } else {\n        const cx = gl.canvas.width * 0.5;\n        const cy = gl.canvas.height * 0.5;\n        const rx = gl.canvas.width * 0.15;\n        const ry = gl.canvas.height * 0.15;\n        targetX = cx + Math.cos(elapsed * speed) * rx;\n        targetY = cy + Math.sin(elapsed * speed) * ry;\n      }\n      mouseBallPos.x += (targetX - mouseBallPos.x) * hoverSmoothness;\n      mouseBallPos.y += (targetY - mouseBallPos.y) * hoverSmoothness;\n      program.uniforms.iMouse.value.set(mouseBallPos.x, mouseBallPos.y, 0);\n\n      renderer.render({ scene, camera });\n    }\n    animationFrameId = requestAnimationFrame(update);\n\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n      window.removeEventListener(\"resize\", resize);\n      container.removeEventListener(\"pointermove\", onPointerMove);\n      container.removeEventListener(\"pointerenter\", onPointerEnter);\n      container.removeEventListener(\"pointerleave\", onPointerLeave);\n      container.removeChild(gl.canvas);\n      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    };\n  }, [\n    color,\n    cursorBallColor,\n    speed,\n    enableMouseInteraction,\n    hoverSmoothness,\n    animationSize,\n    ballCount,\n    clumpFactor,\n    cursorBallSize,\n    enableTransparency,\n  ]);\n\n  return <div ref={containerRef} className=\"metaballs-container\" />;\n};\n\nexport default MetaBalls; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}